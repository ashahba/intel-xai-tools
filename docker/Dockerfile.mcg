#
# Copyright (c) 2024 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

ARG IMAGE_NAME=ubuntu
ARG IMAGE_TAG=22.04

# Clean base for MCG
FROM ${IMAGE_NAME}:${IMAGE_TAG} as base

ARG PY_VER=3.10

RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get autoclean && \
    apt-get autoremove -y && \
    DEBIAN_FRONTEND=noninteractive \
    apt-get install --no-install-recommends --fix-missing -y \
    python${PY_VER} \
    python3-pip \
    tzdata

RUN ln -sf $( which python${PY_VER} ) /usr/bin/python

# Development MCG image
FROM base as builder

ARG PY_VER=3.10
ARG APP_DIR=/intel-xai

ARG POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_IN_PROJECT=1 \
    POETRY_VIRTUALENVS_CREATE=1

RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get autoclean && \
    apt-get autoremove -y && \
    apt-get install --no-install-recommends --fix-missing -y \
    g++ \    
    python${PY_VER}-dev

RUN python${PY_VER} -m pip install --no-cache-dir \
    'poetry==1.8.2'

COPY . ${APP_DIR}
WORKDIR ${APP_DIR}

RUN /usr/local/bin/poetry config virtualenvs.create false && \
    poetry install --no-root --with test --extras model-card && \
	poetry run python -m pip install --no-cache-dir --no-deps \
		asttokens==2.4.1 \
		executing==2.0.1 \
		ipython==8.10 \
		jupyter-server==2.14.1 \
		pure-eval==0.2.2 \
		stack-data==0.6.3 && \
    rm -rf ${HOME}/.cache/pypoetry ${HOME}/.cache/pip

# Production MCG image
FROM base as runtime

ARG APP_DIR=/intel-xai
ARG UID=1000
ARG GID=1000
ARG NON_ROOT_USER=intelai

SHELL ["/bin/bash", "-c"]

# Create a non-root user 'intelai'
RUN addgroup --gid ${GID} ${NON_ROOT_USER} && \
    adduser --uid ${UID} --gid ${GID} --disabled-password --gecos "" ${NON_ROOT_USER}

# Set the non-root user as the default user
USER ${NON_ROOT_USER}

COPY --from=builder --chown=${NON_ROOT_USER}:${NON_ROOT_USER} ${APP_DIR} ${APP_DIR}

ENV VIRTUAL_ENV="${APP_DIR}/.venv" \
    PATH="${APP_DIR}/.venv/bin:${PATH}"

WORKDIR ${APP_DIR}/notebooks/model_card_gen

EXPOSE 8888

RUN echo "source activate ${VIRTUAL_ENV}" >> ~/.bashrc

CMD ["bash", "-c", "source activate ${VIRTUAL_ENV} && jupyter notebook --port 8888 --ip 0.0.0.0 --no-browser --allow-root"]

HEALTHCHECK --interval=1m --timeout=5s --retries=5 \
  CMD jupyter server list || exit 1
