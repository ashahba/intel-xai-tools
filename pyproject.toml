[tool.poetry]
name = "intel-ai-safety"
version = "1.3.0"
description = ""
authors = ["IntelAI <IntelAI@intel.com>"]
readme = "README.md"
packages = []

[tool.poetry.dependencies]
python = ">=3.10, <3.12"
"intel-ai-safety-model-card-gen" = {path = "model_card_gen", develop = true, optional=true}
"intel-ai-safety-explainer" = {path = "explainer", develop = true, optional=true}
"intel-ai-safety-explainer-attributions" = {path = "plugins/explainers/attributions", develop = true, optional=true}
"intel-ai-safety-explainer-attributions-hugging-face" = {path = "plugins/explainers/attributions-hugging-face", develop = true, optional=true}
"intel-ai-safety-explainer-captum" = {path = "plugins/explainers/captum", develop = true, optional=true}
"intel-ai-safety-explainer-cam-tensorflow" = {path = "plugins/explainers/cam-tensorflow", develop = true, optional=true}
"intel-ai-safety-explainer-cam-pytorch" = {path = "plugins/explainers/cam-pytorch", develop = true, optional=true}
"intel-ai-safety-explainer-metrics" = {path = "plugins/explainers/metrics", develop = true, optional=true}
"intel-ai-safety-benchmarks-classification" = {path = "plugins/benchmark/classification_metrics", develop = true, optional = true}

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
backcall = "0.2.0"
datasets = "3.3.2"
deepdiff = "8.3.0"
pickleshare = "0.7.5"
pillow = "11.1.0"
pytest = "8.3.5"
scikit-learn = "1.6.1"
sentencepiece = "0.2.0"
tensorflow-cpu = "2.17.1"
tensorflow-hub = "0.16.1"
torch = {version = "2.5.1", source = "pytorch-cpu"}
torchvision = {version = "0.20.1", source = "pytorch-cpu"}

[tool.poetry.extras]
model-card = ["intel-ai-safety-model-card-gen"]
explainer = ["intel-ai-safety-explainer"]
explainer-tensorflow = ["intel-ai-safety-explainer",
                        "intel-ai-safety-explainer-attributions",
                        "intel-ai-safety-explainer-cam-tensorflow",
                        "intel-ai-safety-explainer-metrics",
]
explainer-pytorch = ["intel-ai-safety-explainer",
                 "intel-ai-safety-explainer-captum",
                 "intel-ai-safety-explainer-cam-pytorch",
                 "intel-ai-safety-explainer-metrics"
]
explainer-all = ["intel-ai-safety-explainer",
                 "intel-ai-safety-explainer-attributions",
                 "intel-ai-safety-explainer-attributions-hugging-face",
                 "intel-ai-safety-explainer-captum",
                 "intel-ai-safety-explainer-cam-tensorflow",
                 "intel-ai-safety-explainer-cam-pytorch",
                 "intel-ai-safety-explainer-metrics",
]
benchmark = ["intel-ai-safety-benchmarks-classification",]
all = ["intel-ai-safety-model-card-gen",
       "intel-ai-safety-explainer",
       "intel-ai-safety-explainer-attributions",
       "intel-ai-safety-explainer-attributions-hugging-face",
       "intel-ai-safety-explainer-captum",
       "intel-ai-safety-explainer-cam-tensorflow",
       "intel-ai-safety-explainer-cam-pytorch",
       "intel-ai-safety-explainer-metrics",
       "intel-ai-safety-benchmarks-classification"
]

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[[tool.poetry.source]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[[tool.poetry_bumpversion.replacements]]
files = [
         "model_card_gen/pyproject.toml",
         "explainer/pyproject.toml",
         "plugins/explainers/attributions/pyproject.toml",
         "plugins/explainers/attributions-hugging-face/pyproject.toml",
         "plugins/explainers/captum/pyproject.toml",
         "plugins/explainers/cam-tensorflow/pyproject.toml",
         "plugins/explainers/cam-pytorch/pyproject.toml",
         "plugins/explainers/metrics/pyproject.toml",
         "plugins/benchmarks/classification_metrics/pyproject.toml"
         ]

[[tool.poetry_bumpversion.replacements]]
files = ["intel_ai_safety/version.py",
       "explainer/intel_ai_safety/explainer/version.py",
       "model_card_gen/intel_ai_safety/model_card_gen/version.py",
       "plugins/benchmark/classification_metrics/version.py"]
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

[build-system]
requires = ["poetry"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
extend-exclude = '''
       /(\.git|\.venv|__pycache__|\.cache|\.tox|\.pytest_cache|\.mypy_cache|)/
       \.pyc$
       '''
force-exclude = '''docker/helm-runner/third_party|model_card_gen/intel_ai_safety/model_card_gen/model_card.py'''
preview = true
target-version = ["py310", "py311"]
